// Code generated by counterfeiter. DO NOT EDIT.
package notifierfakes

import (
	"sync"

	"github.com/ggsomnoev/sumup-notification-task/internal/notification/consumer/service/notifier"
	"github.com/lateralusd/textbelt"
)

type FakeTextbeltClient struct {
	QuotaStub        func() (int, error)
	quotaMutex       sync.RWMutex
	quotaArgsForCall []struct {
	}
	quotaReturns struct {
		result1 int
		result2 error
	}
	quotaReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	SendStub        func(string, string) (string, error)
	sendMutex       sync.RWMutex
	sendArgsForCall []struct {
		arg1 string
		arg2 string
	}
	sendReturns struct {
		result1 string
		result2 error
	}
	sendReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	StatusStub        func(string) (textbelt.MessageStatus, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
		arg1 string
	}
	statusReturns struct {
		result1 textbelt.MessageStatus
		result2 error
	}
	statusReturnsOnCall map[int]struct {
		result1 textbelt.MessageStatus
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTextbeltClient) Quota() (int, error) {
	fake.quotaMutex.Lock()
	ret, specificReturn := fake.quotaReturnsOnCall[len(fake.quotaArgsForCall)]
	fake.quotaArgsForCall = append(fake.quotaArgsForCall, struct {
	}{})
	stub := fake.QuotaStub
	fakeReturns := fake.quotaReturns
	fake.recordInvocation("Quota", []interface{}{})
	fake.quotaMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTextbeltClient) QuotaCallCount() int {
	fake.quotaMutex.RLock()
	defer fake.quotaMutex.RUnlock()
	return len(fake.quotaArgsForCall)
}

func (fake *FakeTextbeltClient) QuotaCalls(stub func() (int, error)) {
	fake.quotaMutex.Lock()
	defer fake.quotaMutex.Unlock()
	fake.QuotaStub = stub
}

func (fake *FakeTextbeltClient) QuotaReturns(result1 int, result2 error) {
	fake.quotaMutex.Lock()
	defer fake.quotaMutex.Unlock()
	fake.QuotaStub = nil
	fake.quotaReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeTextbeltClient) QuotaReturnsOnCall(i int, result1 int, result2 error) {
	fake.quotaMutex.Lock()
	defer fake.quotaMutex.Unlock()
	fake.QuotaStub = nil
	if fake.quotaReturnsOnCall == nil {
		fake.quotaReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.quotaReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeTextbeltClient) Send(arg1 string, arg2 string) (string, error) {
	fake.sendMutex.Lock()
	ret, specificReturn := fake.sendReturnsOnCall[len(fake.sendArgsForCall)]
	fake.sendArgsForCall = append(fake.sendArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.SendStub
	fakeReturns := fake.sendReturns
	fake.recordInvocation("Send", []interface{}{arg1, arg2})
	fake.sendMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTextbeltClient) SendCallCount() int {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return len(fake.sendArgsForCall)
}

func (fake *FakeTextbeltClient) SendCalls(stub func(string, string) (string, error)) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = stub
}

func (fake *FakeTextbeltClient) SendArgsForCall(i int) (string, string) {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	argsForCall := fake.sendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTextbeltClient) SendReturns(result1 string, result2 error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = nil
	fake.sendReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTextbeltClient) SendReturnsOnCall(i int, result1 string, result2 error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = nil
	if fake.sendReturnsOnCall == nil {
		fake.sendReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.sendReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTextbeltClient) Status(arg1 string) (textbelt.MessageStatus, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.StatusStub
	fakeReturns := fake.statusReturns
	fake.recordInvocation("Status", []interface{}{arg1})
	fake.statusMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTextbeltClient) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeTextbeltClient) StatusCalls(stub func(string) (textbelt.MessageStatus, error)) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = stub
}

func (fake *FakeTextbeltClient) StatusArgsForCall(i int) string {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	argsForCall := fake.statusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTextbeltClient) StatusReturns(result1 textbelt.MessageStatus, result2 error) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 textbelt.MessageStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeTextbeltClient) StatusReturnsOnCall(i int, result1 textbelt.MessageStatus, result2 error) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 textbelt.MessageStatus
			result2 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 textbelt.MessageStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeTextbeltClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.quotaMutex.RLock()
	defer fake.quotaMutex.RUnlock()
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTextbeltClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ notifier.TextbeltClient = new(FakeTextbeltClient)
